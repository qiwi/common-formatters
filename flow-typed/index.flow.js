/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.12.0
 */

declare module "@qiwi/common-formatters/target/es6" {
  declare export * from "@qiwi/common-formatters/target/es6/money/index"

  declare export * from "@qiwi/common-formatters/target/es6/number"

  declare export * from "@qiwi/common-formatters/target/es6/cardpan"

  declare export * from "@qiwi/common-formatters/target/es6/phone"

  declare export * from "@qiwi/common-formatters/target/es6/percent"
}

declare module "@qiwi/common-formatters/target/es6/money/index" {
  import type { IFormatter } from "@qiwi/common-formatters/target/es6/interface";

  /**
   * @interface IFormatMoneyOpts
   * @property {string} digitDelimiter
   * @property {string} fractionDelimiter
   * @property {number} fractionLength
   * @property {string} currencyCode
   * @property {string} currencySymbol
   * @property {boolean} sign forces sign indication
   */
  declare export type IFormatMoneyOpts = {
    strict?: boolean,
    digitDelimiter?: string,
    fractionDelimiter?: string,
    fractionLength?: number,
    currencyCode?: string,
    currencySymbol?: string,
    sign?: boolean,
    ...
  };
  declare export var FORMAT_MONEY_DEFAULTS: IFormatMoneyOpts;

  /**
   * Money formatter.
   * @name formatMoney
   * @type {Function}
   * @example formatMoney(12345.6789)   // '12 345,68'
   * formatMoney(12300.45, {currencyCode: 'RUB', fractionDelimiter: '.'}) // '12 300.45 ₽'
   * formatMoney(123.45, {currencySymbol: 'Foo'}) // '123,45 Foo'
   * @public
   * @param {string} value
   * @param {IFormatMoneyOpts} [opts]
   * @return {string}
   */
  declare export var formatMoney: IFormatter;
  declare export var getSymbol: (
    currencyCode?: string | void,
    fallback?: string | void
  ) => string | void;
}

declare module "@qiwi/common-formatters/target/es6/number" {
  import type {
    IFormatter,
    IValidator,
  } from "@qiwi/common-formatters/target/es6/interface";

  /**
   * @interface IFormatNumberOpts
   * @property {string} digitDelimiter
   * @property {string} fractionDelimiter
   * @property {number} fractionLength
   * @property {boolean} sign forces sign indication
   */
  declare export type IFormatNumberOpts = {
    digitDelimiter?: string,
    fractionDelimiter?: string,
    fractionLength?: number,
    strict?: boolean,
    sign?: boolean,
    ...
  };
  declare export var FORMAT_NUMBER_DEFAULTS: IFormatNumberOpts;
  declare export var validateNumber: IValidator;
  declare export var MINUS_SIGN: string;
  declare export var PLUS_SIGN: string;

  /**
   * Number formatter.
   * @module
   * @qiwi /common-formatters
   * @name formatNumber
   * @type {Function}
   * @public
   * @param {string} value
   * @param {IFormatNumberOpts} [opts]
   * @return {string}
   * @example formatNumber(12345.6789)  //  '12 345,6789'
   * formatNumber(12345.6789, {digitDelimiter: ',', fractionDelimiter: '.'}) // '12,345.6789'
   */
  declare export var formatNumber: IFormatter;
}

declare module "@qiwi/common-formatters/target/es6/cardpan" {
  import type {
    IFormatter,
    IValidator,
  } from "@qiwi/common-formatters/target/es6/interface";

  /**
   * @interface IFormatCardPanOpts
   * @property {string} digitDelimiter
   * @property {string} maskSymbol
   */
  declare export type IFormatCardPanOpts = {
    strict?: boolean,
    maskSymbol?: string,
    digitDelimiter?: string,
    ...
  };
  declare export var FORMAT_CARDPAN_DEFAULTS: IFormatCardPanOpts;

  /**
   * Card PAN formatter.
   * @name formatCardPan
   * @type {Function}
   * @param {string} value
   * @param {Object} [opts]
   * @returns {string}
   * @example formatCardPan('1234567812345678', {digitDelimiter: '-'}) // '1234-5678-1234-5678'
   */
  declare export var formatCardPan: IFormatter;
  declare export var validateCardPan: IValidator;
}

declare module "@qiwi/common-formatters/target/es6/phone" {
  import type {
    IFormatter,
    IValidator,
  } from "@qiwi/common-formatters/target/es6/interface";

  declare export var RUSSIAN_MOBILE_PHONE: string;

  /**
   * Phone formatter.
   * @interface IFormatPhoneOpts
   * @property {string} blocksDelimiter
   * @property {string} countryCode
   * @property {string} areaCode
   * @property {boolean} areaBrackets
   * @property {string} countryCodePrefix
   * @property {number} countryCodeLength
   * @property {number} areaCodeLength
   * @property {number} phoneNumberLength
   * @property {string} phoneNumberDelimiter
   * @property {string} mask
   */
  declare export type IFormatPhoneOpts = {
    strict?: boolean,
    blocksDelimiter?: string,
    countryCode?: string,
    areaCode?: string,
    areaBrackets?: boolean,
    countryCodePrefix?: string,
    countryCodeLength?: number,
    areaCodeLength?: number,
    phoneNumberLength?: number,
    phoneNumberDelimiter?: string,
    mask?: string | null,
    ...
  };
  declare export var FORMAT_PHONE_DEFAULTS: IFormatPhoneOpts;
  declare export var validatePhone: IValidator;

  /**
   * Phone formatter.
   * Relied on E.164 https://en.wikipedia.org/wiki/E.164
   * @name formatPhone
   * @param {string} value
   * @param {IFormatPhoneOpts} [opts]
   * @return {string}
   * @example // Basic cases
   * formatPhone('1234567')     // 123-45-67
   * formatPhone('12345678')    // 1234-5678
   * formatPhone('12345')       // 1-23-45
   * formatPhone('1234567890')  // 1234567890
   *
   * // Format by mask
   * formatPhone('79876543210', {mask: '+* *** ***-**-**'}) // +7 987 654-32-10
   *
   * // Format by opts
   * formatPhone('223344', {countryCode: '7', areaCode: '8443', areaBrackets: true, phoneNumberDelimiter: '_'}) // +7 (8443) 22_33_44
   */
  declare export var formatPhone: IFormatter;
  declare export var parseBlocks: (
    value: string,
    ...blocks: Array<number | void>
  ) => Array<string>;
  declare export var resolveBlockLengths: (
    entireLength: number,
    ...blocks: Array<number | void>
  ) => Array<number>;
  declare export var formatAreaCode: (
    value?: string | void,
    brackets?: boolean | void
  ) => string | null;
  declare export var formatCountryCode: (
    value?: string | void,
    prefix?: string | void
  ) => string | null;
  declare export function formatPhoneNumber(
    value: string,
    delimiter?: string
  ): string | null;

  declare export function formatByMask(value: string, mask: string): string;
}

declare module "@qiwi/common-formatters/target/es6/percent" {
  import type { IFormatter } from "@qiwi/common-formatters/target/es6/interface";

  /**
   * Percent value formatter.
   * @interface IFormatPercentOpts
   * @property {string} digitDelimiter
   * @property {string} fractionDelimiter
   * @property {number} fractionLength
   * @property {number} multiplier
   * @property {boolean} sign forces sign indication
   */
  declare export type IFormatPercentOpts = {
    strict?: boolean,
    digitDelimiter?: string,
    fractionDelimiter?: string,
    fractionLength?: number,
    multiplier?: number,
    sign?: boolean,
    ...
  };
  declare export var FORMAT_PERCENT_DEFAULTS: IFormatPercentOpts;
  declare export var formatPercent: IFormatter;
}

declare module "@qiwi/common-formatters/target/es6/interface" {
  /**
   * @module
   * @qiwi /common-formatter
   */
  declare export type IAny = any;
  declare export type IFormatterOpts = {
    [key: string]: IAny,
    ...
  };
  declare export type IFormatted = string;
  declare export type IFormatter = (
    value: IAny,
    opts?: IFormatterOpts
  ) => IFormatted;
  declare export type IValidator = (
    value: IAny,
    opts?: IFormatterOpts
  ) => boolean;
}

declare module "@qiwi/common-formatters/target/es5" {
  declare export * from "@qiwi/common-formatters/target/es5/money/index"

  declare export * from "@qiwi/common-formatters/target/es5/number"

  declare export * from "@qiwi/common-formatters/target/es5/cardpan"

  declare export * from "@qiwi/common-formatters/target/es5/phone"

  declare export * from "@qiwi/common-formatters/target/es5/percent"
}

declare module "@qiwi/common-formatters/target/es5/money/index" {
  import type { IFormatter } from "@qiwi/common-formatters/target/es5/interface";

  /**
   * @interface IFormatMoneyOpts
   * @property {string} digitDelimiter
   * @property {string} fractionDelimiter
   * @property {number} fractionLength
   * @property {string} currencyCode
   * @property {string} currencySymbol
   * @property {boolean} sign forces sign indication
   */
  declare export type IFormatMoneyOpts = {
    strict?: boolean,
    digitDelimiter?: string,
    fractionDelimiter?: string,
    fractionLength?: number,
    currencyCode?: string,
    currencySymbol?: string,
    sign?: boolean,
    ...
  };
  declare export var FORMAT_MONEY_DEFAULTS: IFormatMoneyOpts;

  /**
   * Money formatter.
   * @name formatMoney
   * @type {Function}
   * @example formatMoney(12345.6789)   // '12 345,68'
   * formatMoney(12300.45, {currencyCode: 'RUB', fractionDelimiter: '.'}) // '12 300.45 ₽'
   * formatMoney(123.45, {currencySymbol: 'Foo'}) // '123,45 Foo'
   * @public
   * @param {string} value
   * @param {IFormatMoneyOpts} [opts]
   * @return {string}
   */
  declare export var formatMoney: IFormatter;
  declare export var getSymbol: (
    currencyCode?: string | void,
    fallback?: string | void
  ) => string | void;
}

declare module "@qiwi/common-formatters/target/es5/number" {
  import type {
    IFormatter,
    IValidator,
  } from "@qiwi/common-formatters/target/es5/interface";

  /**
   * @interface IFormatNumberOpts
   * @property {string} digitDelimiter
   * @property {string} fractionDelimiter
   * @property {number} fractionLength
   * @property {boolean} sign forces sign indication
   */
  declare export type IFormatNumberOpts = {
    digitDelimiter?: string,
    fractionDelimiter?: string,
    fractionLength?: number,
    strict?: boolean,
    sign?: boolean,
    ...
  };
  declare export var FORMAT_NUMBER_DEFAULTS: IFormatNumberOpts;
  declare export var validateNumber: IValidator;
  declare export var MINUS_SIGN: string;
  declare export var PLUS_SIGN: string;

  /**
   * Number formatter.
   * @module
   * @qiwi /common-formatters
   * @name formatNumber
   * @type {Function}
   * @public
   * @param {string} value
   * @param {IFormatNumberOpts} [opts]
   * @return {string}
   * @example formatNumber(12345.6789)  //  '12 345,6789'
   * formatNumber(12345.6789, {digitDelimiter: ',', fractionDelimiter: '.'}) // '12,345.6789'
   */
  declare export var formatNumber: IFormatter;
}

declare module "@qiwi/common-formatters/target/es5/cardpan" {
  import type {
    IFormatter,
    IValidator,
  } from "@qiwi/common-formatters/target/es5/interface";

  /**
   * @interface IFormatCardPanOpts
   * @property {string} digitDelimiter
   * @property {string} maskSymbol
   */
  declare export type IFormatCardPanOpts = {
    strict?: boolean,
    maskSymbol?: string,
    digitDelimiter?: string,
    ...
  };
  declare export var FORMAT_CARDPAN_DEFAULTS: IFormatCardPanOpts;

  /**
   * Card PAN formatter.
   * @name formatCardPan
   * @type {Function}
   * @param {string} value
   * @param {Object} [opts]
   * @returns {string}
   * @example formatCardPan('1234567812345678', {digitDelimiter: '-'}) // '1234-5678-1234-5678'
   */
  declare export var formatCardPan: IFormatter;
  declare export var validateCardPan: IValidator;
}

declare module "@qiwi/common-formatters/target/es5/phone" {
  import type {
    IFormatter,
    IValidator,
  } from "@qiwi/common-formatters/target/es5/interface";

  declare export var RUSSIAN_MOBILE_PHONE: string;

  /**
   * Phone formatter.
   * @interface IFormatPhoneOpts
   * @property {string} blocksDelimiter
   * @property {string} countryCode
   * @property {string} areaCode
   * @property {boolean} areaBrackets
   * @property {string} countryCodePrefix
   * @property {number} countryCodeLength
   * @property {number} areaCodeLength
   * @property {number} phoneNumberLength
   * @property {string} phoneNumberDelimiter
   * @property {string} mask
   */
  declare export type IFormatPhoneOpts = {
    strict?: boolean,
    blocksDelimiter?: string,
    countryCode?: string,
    areaCode?: string,
    areaBrackets?: boolean,
    countryCodePrefix?: string,
    countryCodeLength?: number,
    areaCodeLength?: number,
    phoneNumberLength?: number,
    phoneNumberDelimiter?: string,
    mask?: string | null,
    ...
  };
  declare export var FORMAT_PHONE_DEFAULTS: IFormatPhoneOpts;
  declare export var validatePhone: IValidator;

  /**
   * Phone formatter.
   * Relied on E.164 https://en.wikipedia.org/wiki/E.164
   * @name formatPhone
   * @param {string} value
   * @param {IFormatPhoneOpts} [opts]
   * @return {string}
   * @example // Basic cases
   * formatPhone('1234567')     // 123-45-67
   * formatPhone('12345678')    // 1234-5678
   * formatPhone('12345')       // 1-23-45
   * formatPhone('1234567890')  // 1234567890
   *
   * // Format by mask
   * formatPhone('79876543210', {mask: '+* *** ***-**-**'}) // +7 987 654-32-10
   *
   * // Format by opts
   * formatPhone('223344', {countryCode: '7', areaCode: '8443', areaBrackets: true, phoneNumberDelimiter: '_'}) // +7 (8443) 22_33_44
   */
  declare export var formatPhone: IFormatter;
  declare export var parseBlocks: (
    value: string,
    ...blocks: Array<number | void>
  ) => Array<string>;
  declare export var resolveBlockLengths: (
    entireLength: number,
    ...blocks: Array<number | void>
  ) => Array<number>;
  declare export var formatAreaCode: (
    value?: string | void,
    brackets?: boolean | void
  ) => string | null;
  declare export var formatCountryCode: (
    value?: string | void,
    prefix?: string | void
  ) => string | null;
  declare export function formatPhoneNumber(
    value: string,
    delimiter?: string
  ): string | null;

  declare export function formatByMask(value: string, mask: string): string;
}

declare module "@qiwi/common-formatters/target/es5/percent" {
  import type { IFormatter } from "@qiwi/common-formatters/target/es5/interface";

  /**
   * Percent value formatter.
   * @interface IFormatPercentOpts
   * @property {string} digitDelimiter
   * @property {string} fractionDelimiter
   * @property {number} fractionLength
   * @property {number} multiplier
   * @property {boolean} sign forces sign indication
   */
  declare export type IFormatPercentOpts = {
    strict?: boolean,
    digitDelimiter?: string,
    fractionDelimiter?: string,
    fractionLength?: number,
    multiplier?: number,
    sign?: boolean,
    ...
  };
  declare export var FORMAT_PERCENT_DEFAULTS: IFormatPercentOpts;
  declare export var formatPercent: IFormatter;
}

declare module "@qiwi/common-formatters/target/es5/interface" {
  /**
   * @module
   * @qiwi /common-formatter
   */
  declare export type IAny = any;
  declare export type IFormatterOpts = {
    [key: string]: IAny,
    ...
  };
  declare export type IFormatted = string;
  declare export type IFormatter = (
    value: IAny,
    opts?: IFormatterOpts
  ) => IFormatted;
  declare export type IValidator = (
    value: IAny,
    opts?: IFormatterOpts
  ) => boolean;
}

declare module "@qiwi/common-formatters" {
  declare export * from "@qiwi/common-formatters/target/es5"
}
